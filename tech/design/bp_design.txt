##########################################################################
# 
#  eosnewyork.io Block Producing Design
#
##########################################################################

All opinions, details, and design expressed here are subject to change(STC)

Table of Contents
1. Block Producing Node
   a. Specifications
   b. Location
   c. Security
2. Non-Producing Node(s)
   a. Specifications
   b. Location
   c. Security
3. Offsite Backups
   a. Specifications
   b. Location
   c. Security
4. Security
5. Load Balancing
6. Monitoring
7. Automation/Configuration
8. List of Open Source Tooling
9. Future Plans
   a. Scaling
   a. Colocation
   b. Cloud

[FIG 1]

1. Block Producing Node
   This will be the main node that eosnewyork.io uses to produce blocks.  
   a. Specifications:
      - OS: Ubuntu 17.10
      - vCPU: 8
      - RAM: 256 - 512
      - Storage: 
        - 512GB SSD (blocks)
        - 1TB HDD for IPFS
      - Network: 1 Gbps (scaling as necessary)
   b. Location:
      We will be running our initial producing node in the AWS cloud because 
      we believe one of the core responsibilites of a BP to stay agile and 
      expand at the speed the blockchain requires.
   c. Security:
      We plan on locking this node down using a variety of custom software
      stacks, built-in unix tools, and industry standards.  As this is the 
      flagship node security is obviously of the utmost importance.  We also 
      plan on working with a couple of potential BPs and various security 
      professionals to produce a white paper on configuration and securing 
      a producing node.

2. Non-Producing Node(s)
   This node(s) will be load balanced nodes used by dApps/users to query
   the blockchain.  These will be publicly reachable via a load balancing 
   node.  The idea is to seperate and isolate the producing node as much
   as possible to ensure maximum uptime.  The second responsiblity of 
   these nodes is to work as a backup to the producing node in case of 
   a security compromise or software/network failure.
   a. Specifications
      - OS: Ubuntu 17.10
      - vCPU: 8 
      - RAM: 256 - 512
      - Storage: 
        - 512GB HDD (blocks)
        - 1TB HDD for IPFS
      - Network: 1 Gbps (scaling as necessary)
   b. Location
      Resides in the same AWS Region as the main block producing node
   c. Security
      These boxes will be public facing so they will need to be a little
      less constrained than the BP node however connections to the BP node
      will be locked down in case of compromise.
3. Offsite Backup(s)
   Thes node(s) will be other standby nodes that are constantly syncing the
   chain however will reside in distinctly different geographical locations
   and outside of AWS.  These boxes will remain in the cloud however we will
   be using different providers to allow for the handling catastrophic failure
   of an AWS region or of AWS as a whole.
   a. Specifications
      - OS: Ubuntu 17.10
      - vCPU: 8 
      - RAM: 256 - 512
      - Storage: 
        - 512GB HDD (blocks)
        - 1TB HDD for IPFS
      - Network: 1 Gbps (scaling as necessary)
   b. Location
      TBD.  Most likely at least one will reside outside the US and in Azure and
      GCE
   c. Security
      See [link to section 2.c]
4. Security
   The security of the BP node is of the utmost important.  There is nothing 
   else that matters more to us than ensuring that our node is secure and
   producing blocks.  To this end a whitelist firewalled approach to locking 
   down BP nodes will be utilized.  This will require a greater understanding 
   of the port needs of the eosiod as well as the eosioc so the approach will 
   mature with the software.  Outside of network traffic the hosts will be 
   secured and patch using the best practices outlined by our security team.
5. Load Balancing
   
6. Monitoring
7. Automation/Configuration
8. List of Open Source Tooling
9. Future Plans
   a. Scaling
   b. Colocation
   c. Cloud
